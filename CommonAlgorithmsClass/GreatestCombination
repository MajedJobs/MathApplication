public class GreatestCombination extends CommonAlgorithms {
    int[] number; 
    int[] inputs; 
    char status; 
    int size; 
    
    public GreatestCombination(int[] inputs){
        this.inputs = inputs; 
        number = inputs; 
    }
    
    public int[] getInputArray(){
        return inputs; 
    }
    
    public int[] findMaximumNumber(){
        char[] identifiers = new char[4];
		// to identify each element in the array 
		int temp,temp2; // temp = y   ,,,, temp2 = y+1
		int holder; 
		for(int x=number.length-1; x>0; x--){
				for(int y=0; y<x; y++){
					
					if(number[y] > 9 ){
						identifiers[y] = 'S'; 
					}else{
						identifiers[y] = 'N'; 
					}
					
					if(number[y+1] > 9 ){
						identifiers[y+1] = 'S';
					}else{
						identifiers[y+1] = 'N'; 
					}
					
					
					// first condition 
					
					if(identifiers[y] == 'S' && identifiers[y+1] == 'S'){
						if(number[y] > number[y+1]){
							holder = number[y]; 
							number[y] = number[y+1]; 
							number[y+1] = holder; 
						}
					}
					// second condition 
					
					else if(identifiers[y] == 'S' && identifiers[y+1] == 'N'){
						temp = number[y]/10; 
						
							if(temp > number[y+1]){
								holder = number[y]; 
								number[y] = number[y+1]; 
								number[y+1] = holder; 
							}
					}
					
					// third condition 
					
					else if(identifiers[y] == 'N' && identifiers[y+1] == 'S'){
						temp2 = number[y+1]/10; 
						
							if(number[y] > temp2){
								holder = number[y]; 
								number[y] = number[y+1]; 
								number[y+1] = holder; 
							}
					}
					
					// fourth condition 
					
					else if(identifiers[y] == 'N' && identifiers[y+1] == 'N'){
							if(number[y] > number[y+1]){
								holder = number[y]; 
								number[y] = number[y+1]; 
								number[y+1] = holder;
							}
					}
				}// end of the inner loop 
		}// end of the outer loop 
		return number; 
    }
}
