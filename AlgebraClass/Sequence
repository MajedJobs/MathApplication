public class Sequence {
	
	private String sequenceType;
	private double nextTerm;
	private double previousTerm;
	
	
	public Sequence() {
		
	}

	
	@Override
	public String toString() {
		return "Sequence [Sequence Type= " + sequenceType + ", Next Term= " + nextTerm 
				+ ", Previous Term= " + previousTerm + "]";
	}


	public String getSequenceType() {
		return sequenceType;
	}

	public void setSequenceType(String sequenceType) {
		this.sequenceType = sequenceType;
	}

	public double getNextTerm() {
		return nextTerm;
	}

	public void setNextTerm(double nextTerm) {
		this.nextTerm = nextTerm;
	}

	public double getPreviousTerm() {
		return previousTerm;
	}

	public void setPreviousTerm(double previousTerm) {
		this.previousTerm = previousTerm;
	}
	
	
	public String fetchSequenceType(double[] sequence) {
		int counter= 0;
		for(int i=0; i<3; i++) {
			if(sequence[i+1]-sequence[i]== sequence[i+2]-sequence[i+1])
				counter++;
		}
		if(counter== 3)
			sequenceType= "Arithmetic";
		
		else if(counter== 0) {
			for(int i=0; i<3; i++) {
				if(sequence[i+1]/sequence[i]== sequence[i+2]/sequence[i+1])
					counter++;
			}
			if(counter== 3)
				sequenceType="Geometric";
		}
		else
			sequenceType= "-1";
		return sequenceType;
	}
	
	public double fetchNextTerm(double[] sequence) {
		double increase;
		for(int i=0; i<3; i++) {
			if(fetchSequenceType(sequence).equalsIgnoreCase("Arithmetic")) {
				increase= (sequence[i+1]-sequence[i]);
				nextTerm= (increase+sequence[sequence.length-1]);
			}
			else if(fetchSequenceType(sequence).equalsIgnoreCase("Geometric")) {
				increase= (sequence[i+1]/sequence[i]);
				nextTerm= (increase*sequence[sequence.length-1]);
			}
		}
		return nextTerm;
	}
	
	public double fetchPreviousTerm(double[] sequence) {
		double increase;
		for(int i=0; i<3; i++) {
			if(fetchSequenceType(sequence).equalsIgnoreCase("Arithmetic")) {
				increase= (sequence[i+1]-sequence[i]);
				previousTerm= (sequence[0]-  increase);
			}
			else if(fetchSequenceType(sequence).equalsIgnoreCase("Geometric")) {
				increase= (sequence[i+1]/sequence[i]);
				previousTerm= (sequence[0]/ increase);
			}
		}
		return previousTerm;
	}
}
